on:
  push:
    tags:
      - v*
  pull_request:
    branches:
      - main
      - use-static-tls-impl

name: Production

jobs:
  linux:
    strategy:
      fail-fast: false
      matrix:
        target:
          [
            "x86_64-unknown-linux-gnu",
            "x86_64-unknown-linux-musl",
            "aarch64-unknown-linux-gnu",
            "aarch64-unknown-linux-musl",
          ]
    name: ${{ matrix.target }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./ci/docker/Dockerfile
          platforms: linux/amd64
          build-args: TARGET=${{ matrix.target }}
          load: true
          tags: ${{ matrix.target }}
          cache-from: type=gha,scope=${{ matrix.target }}
          cache-to: type=gha,scope=${{ matrix.target }},mode=max

      - name: Compile Volta
        run: >
          docker run 
          --volume ${PWD}:/root/workspace 
          --platform linux/amd64
          --workdir /root/workspace 
          --rm 
          --init 
          --tty 
          ${{ matrix.target }} 
          ./ci/cargo.sh build --release --target=${{ matrix.target }}

      - name: Package Volta
        run: chmod +x ./ci/package.sh && ./ci/package.sh ./target/${{ matrix.target }}/release ${{ matrix.target }}

      - name: Upload release artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}
          path: ./${{ matrix.target }}.tar.gz

  macos:
    strategy:
      fail-fast: false
      matrix:
        target: ["x86_64-apple-darwin", "aarch64-apple-darwin"]
    name: ${{ matrix.target }}
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up cargo
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Compile Volta ( aarch64 )
        if: ${{ matrix.arch == 'aarch64' }}
        run: SDKROOT=$(xcrun -sdk macosx11.1 --show-sdk-path) MACOSX_DEPLOYMENT_TARGET=11.0 cargo build --release --target=${{ matrix.target }}

      - name: Compile Volta ( x86_64 )
        if: ${{ matrix.arch != 'aarch64' }}
        run: cargo build --release --target=${{ matrix.target }}

      - name: Package Volta
        run: chmod +x ./ci/package.sh && ./ci/package.sh ./target/${{ matrix.target }}/release ${{ matrix.target }}

      - name: Upload release artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}
          path: ./${{ matrix.target }}.tar.gz

  windows:
    strategy:
      fail-fast: false
      matrix:
        target: ["x86_64-pc-windows-msvc"]
    name: ${{ matrix.target }}
    runs-on: windows-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up cargo
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true]

      - name: Add cargo-wix subcommand
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-wix

      - name: Compile and package installer
        uses: actions-rs/cargo@v1
        with:
          command: wix
          args: --nocapture --package volta --output target\wix\${{ matrix.target }}.msi

      - name: Load Certificate File
        id: certificate_file
        if: github.event_name == 'push'
        uses: timheuer/base64-to-file@v1
        with:
          fileName: "volta-certificate.pfx"
          encodedString: ${{ secrets.INSTALLER_CERTIFICATE }}

      - name: Sign Installer
        if: github.event_name == 'push'
        env:
          CERTIFICATE_FILE: ${{ steps.certificate_file.outputs.filePath }}
          CERTIFICATE_PASSWORD: ${{ secrets.INSTALLER_CERTIFICATE_PASSWORD }}
        run: |
          & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x86\signtool.exe" sign /fd sha256 /f "$env:CERTIFICATE_FILE" /p "$env:CERTIFICATE_PASSWORD" /tr http://ts.ssl.com /td sha256 /d "Volta: Start Your Engines" /du "https://volta.sh" "target\wix\${{ matrix.target }}.msi"
      - name: Verify Signature
        if: github.event_name == 'push'
        run: |
          & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x86\signtool.exe" verify /pa "target\wix\${{ matrix.target }}.msi"
      - name: Create zip of binaries
        run: powershell Compress-Archive volta*.exe ${{ matrix.target }}.zip
        working-directory: ./target/release

      - name: Upload installer
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}-installer
          path: target/wix/${{ matrix.target }}.msi

      - name: Upload zip
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}-zip
          path: target/release/${{ matrix.target }}.zip

  create-draft-release:
    name: Create draft release
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs:
      - linux
      - macos
      - windows
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create draft release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true

  upload-artifacts:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs:
      - create-draft-release
    strategy:
      fail-fast: false
      matrix:
        artifact:
          [
            "x86_64-unknown-linux-gnu",
            "x86_64-apple-darwin",
            "aarch64-apple-darwin",
            "x86_64-pc-windows-msvc-installer",
            "x86_64-pc-windows-msvc-zip",
          ]
        include:
          - artifact: x86_64-unknown-linux-gnu
            asset_content_type: gzip

          - artifact: x86_64-apple-darwin
            asset_content_type: gzip

          - artifact: aarch64-apple-darwin
            asset_content_type: gzip

          - artifact: x86_64-pc-windows-msvc-installer
            asset_content_type: x-msi

          - artifact: x86_64-pc-windows-msvc-zip
            asset_content_type: x-zip
    name: Upload ${{ matrix.artifact }} artifact
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Determine release version
        id: release_info
        env:
          TAG: ${{ github.ref }}
        run: echo "::set-output name=version::${TAG:11}"

      - name: Fetch `${{ matrix.artifact }}` artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact }}
          path: release

      - name: Upload `${{ matrix.artifact }}` artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_draft_release.outputs.upload_url }}
          asset_path: ./release/${{ matrix.artifact }}.tar.gz
          asset_name: volta-${{ steps.release_info.outputs.version }}-${{ matrix.asset_name }}.tar.gz
          asset_content_type: ${{ matrix.act }}

  upload-manifest:
    name: Upload manifest
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs:
      - upload-artifacts
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Determine release version
        id: release_info
        env:
          TAG: ${{ github.ref }}
        run: echo "::set-output name=version::${TAG:11}"

      - name: Upload manifest file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ci/volta.manifest
          asset_name: volta.manifest
          asset_content_type: text/plain
